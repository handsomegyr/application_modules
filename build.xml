<?xml version="1.0" encoding="UTF-8"?>
<project name="application_modules" default="build">
	<!--
    <target name="build" depends="prepare,lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci,phpunit,phpdox,-check-failure"/>
	-->
    <target name="build" depends="prepare,lint,phpunit,-check-failure"/>
    <target name="clean" unless="clean.done" description="Cleanup build artifacts">
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
        <delete dir="${basedir}/vendor"/>
		<delete dir="${basedir}/vendor"/>
		<delete file="${basedir}/composer.lock"/>	    
        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare" unless="prepare.done" depends="clean,composer-install" description="Prepare for build">
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <property name="prepare.done" value="true"/>
    </target>

    <target name="composer-install" description="composer install thirdparty library and autoloader code">
    <!--
		<exec executable="/usr/bin/php" taskname="composer">
            <arg value="/usr/local/bin/composer"/>
            <arg value="install"/>
        </exec>
	-->   
		<exec executable="/usr/local/bin/composer" taskname="composer">
            <arg value="install"/>
        </exec>
    </target>

    <target name="lint" depends="composer-install">
		
        <apply executable="/usr/bin/php" failonerror="true" taskname="lint">
            <arg value="-l"/>
			<!--
            <fileset dir="${basedir}/apps">
                <include name="**/*.php"/>
                <modified/>
            </fileset>	
			-->			
			<fileset dir="${basedir}/config">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
			<fileset dir="${basedir}/library">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
		
        <exec executable="/usr/local/bin/phploc" taskname="phploc">
            <arg value="--count-tests"/>
            <arg path="${basedir}/apps"/>
        </exec>
    </target>

    <target name="phploc-ci" depends="prepare"
            description="Measure project size using PHPLOC and log result in CSV and XML format">			
        <exec executable="/usr/local/bin/phploc" taskname="phploc">
            <arg value="--count-tests"/>
            <arg value="--log-csv"/>
            <arg path="${basedir}/build/logs/phploc.csv"/>
            <arg value="--log-xml"/>
            <arg path="${basedir}/build/logs/phploc.xml"/>
            <arg path="${basedir}/apps"/>
        </exec>
    </target>

    <target name="pdepend" depends="prepare" description="Calculate software metrics using PHP_Depend">
        <exec executable="/usr/local/bin/pdepend" taskname="pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml"/>
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg"/>
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg"/>
            <arg path="${basedir}/apps"/>
        </exec>
    </target>

    <target name="phpmd" description="Perform project mess detection using PHPMD and print result in text format">
        <exec executable="/usr/local/bin/phpmd" taskname="phpmd">
            <arg path="${basedir}/apps"/>
            <arg value="text"/>
            <arg path="${basedir}/build/phpmd.xml"/>
        </exec>
    </target>

    <target name="phpmd-ci" depends="prepare"
            description="Perform project mess detection using PHPMD and log result in XML format">
        <exec executable="/usr/local/bin/phpmd" taskname="phpmd">
            <arg path="${basedir}/apps"/>
            <arg value="xml"/>
            <arg path="${basedir}/build/phpmd.xml"/>
            <arg value="--reportfile"/>
            <arg path="${basedir}/build/logs/pmd.xml"/>
        </exec>
    </target>

    <target name="phpcs"
            description="Find coding standard violations using PHP_CodeSniffer and print result in text format">
        <exec executable="/usr/bin/phpcs" taskname="phpcs">
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php"/>
            <arg path="${basedir}/apps"/>
        </exec>
    </target>

    <target name="phpcs-ci" depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format">
        <exec executable="/usr/bin/phpcs" output="/dev/null" taskname="phpcs">
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml"/>
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php"/>
            <arg path="${basedir}/apps"/>
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="/usr/local/bin/phpcpd" taskname="phpcpd">
            <arg path="${basedir}/apps"/>
        </exec>
    </target>

    <target name="phpcpd-ci" depends="prepare"
            description="Find duplicate code using PHPCPD and log result in XML format">
        <exec executable="/usr/local/bin/phpcpd" taskname="phpcpd">
            <arg value="--log-pmd"/>
            <arg path="${basedir}/build/logs/pmd-cpd.xml"/>
            <arg path="${basedir}/apps"/>
        </exec>
    </target>

    <target name="phpunit" depends="prepare" description="Run unit tests with PHPUnit">
        <exec executable="/usr/local/bin/phpunit" resultproperty="result.phpunit" taskname="phpunit">
            <arg value="--configuration"/>
            <arg path="${basedir}/build/phpunit.xml"/>
        </exec>
    </target>

    <target name="phpdox" depends="phploc-ci,phpcs-ci,phpmd-ci" description="Generate API documentation using phpDox">
        <exec executable="/usr/local/bin/phpdox" dir="${basedir}/build" taskname="phpdox"/>
    </target>

    <target name="-check-failure">
        <fail message="PHPUnit did not finish successfully">
            <condition>
                <not>
                    <equals arg1="${result.phpunit}" arg2="0"/>
                </not>
            </condition>
        </fail>
    </target>
</project>